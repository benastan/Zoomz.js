// Generated by CoffeeScript 1.3.1
(function() {

  $.extend($.fn, {
    fetchRelativeParent: function() {
      var $this, parentNode;
      $this = $(this).eq(0);
      parentNode = $this.parent();
      if (!parentNode.length || parentNode.get(0).tagName === 'BODY') {
        return $this;
      } else if (parentNode.css('position') === 'relative') {
        return parentNode;
      } else {
        return parentNode.fetchRelativeParent();
      }
    },
    Zoomz: function(options) {
      var additionalCss, applyZoom, defaults, ratioed, settings;
      if (options === false || options === 0) {
        this.each(function() {
          var $this, clone;
          $this = $(this);
          clone = $this.data('clone');
          if (clone) {
            return clone.remove();
          }
        });
      }
      defaults = {
        style: {
          width: 1.4,
          height: 1.4,
          paddingX: '20px',
          paddingY: '10px'
        },
        wait: 250,
        speedOver: 300,
        speedOut: 150
      };
      settings = $.extend(defaults, options);
      ratioed = [];
      additionalCss = {
        margin: 0,
        position: 'absolute'
      };
      $.each(settings.style, function(index, item) {
        if (typeof item === 'number') {
          return ratioed.push(index);
        }
      });
      applyZoom = function() {
        var $this, animHeight, animProps, animWidth, clone, height, offsetLeft, offsetTop, parentNode, px, relativeParent, width;
        $this = $(this).parent();
        parentNode = $this.parent();
        relativeParent = $this.fetchRelativeParent();
        offsetLeft = $this.offset().left - relativeParent.offset().left;
        offsetTop = $this.offset().top - relativeParent.offset().top;
        width = $this.width();
        height = $this.height();
        animWidth = $.inArray('width', ratioed) !== -1 ? width * settings.style.width : parseInt(settings.style.width, 10);
        animHeight = $.inArray('height', ratioed) !== -1 ? height * settings.style.height : parseInt(settings.style.height, 10);
        clone = $this.clone().addClass('clone').appendTo(parentNode).css(additionalCss);
        px = 'px';
        animProps = {
          over: {
            width: animWidth + px,
            height: animHeight + px,
            top: offsetTop - ((animHeight - height) / 2) + px,
            left: offsetLeft - ((animWidth - width) / 2) + px,
            paddingLeft: settings.style.paddingX,
            paddingRight: settings.style.paddingX,
            paddingBottom: settings.style.paddingY,
            paddingTop: settings.style.paddingY
          },
          out: {
            width: width + px,
            height: height + px,
            left: offsetLeft + px,
            top: offsetTop + px,
            paddingLeft: parseInt($this.css('padding-left'), 10),
            paddingRight: parseInt($this.css('padding-right'), 10),
            paddingBottom: parseInt($this.css('padding-bottom'), 10),
            paddingTop: parseInt($this.css('padding-top'), 10)
          }
        };
        clone.css(animProps.out).hide().css('zIndex', 1).find('img').css('width', '100%');
        $this.bind('mouseenter', function() {
          return clone.show();
        });
        clone.bind({
          mouseenter: function(e) {
            var $these;
            $these = $(this);
            $these.addClass('hover');
            return window.setTimeout((function() {
              if ($these.hasClass('hover')) {
                return clone.addClass('animated').css('zIndex', 900000).animate(animProps.over, settings.speedOver, function() {
                  return $this.trigger('animationComplete').trigger('enlargementComplete');
                });
              }
            }), settings.wait);
          },
          mouseleave: function() {
            var $these;
            $these = $(this);
            clone.animate(animProps.out, settings.speedOut, function() {
              $these.removeClass('hover animated');
              $these.css('zIndex', 2).hide();
              return $this.trigger('animationComplete').trigger('shrinkComplete');
            });
            return $this.trigger('animationStart').trigger('shrinkStart');
          },
          click: function() {
            return $this.trigger('click');
          }
        });
        return $this.data('clone', clone);
      };
      return this.each(function() {
        var $this, Img, images;
        $this = $(this);
        images = $this.find('img');
        if (images.length) {
          Img = images.get(0);
        } else {
          void 0;

        }
        if (Img.width) {
          return applyZoom.apply(Img);
        } else {
          return Img.onload = applyZoom;
        }
      });
    }
  });

}).call(this);
